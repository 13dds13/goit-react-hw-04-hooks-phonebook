{"version":3,"sources":["components/contactsList/ContactsList.module.css","components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","service/storageService.js","components/App.js","index.js"],"names":["module","exports","ContactForm","addNewContact","dataUI","useState","FORM_INITIAL_DATA","state","setState","name","number","nameId","nanoid","numberId","handleChange","e","target","value","prev","inputName","inputTel","submitBtn","className","form","onSubmit","preventDefault","htmlFor","input","id","type","pattern","title","required","autoComplete","onChange","btn","Filter","filter","inputSearch","findContactId","wrap","listWrap","styles","listItem","ContactsList","contactsDataToRender","deleteContact","deleteBtn","noDataToRender","contacts","length","map","item","onClick","getDataFromStorage","dataFromStorage","localStorage","getItem","storageKey","JSON","parse","alertMsg","allContacts","search","titleMain","titleSecondary","App","APP_INITIAL_DATA","useEffect","dataToStorage","stringify","setItem","container","toLowerCase","includes","contactsToRender","isAlreadyInContacts","newName","find","alert","checkIsDoublingContacts","contactToDelete","filteredContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a651a798.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__2CJH8\",\"listItem\":\"ContactsList_listItem__1MD_k\",\"btn\":\"ContactsList_btn__3p_my\",\"name\":\"ContactsList_name__1KJf-\",\"number\":\"ContactsList_number__1hRxz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3gAn0\",\"btn\":\"ContactForm_btn__pGwMA\",\"input\":\"ContactForm_input__3N3wQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2hGjQ\",\"title\":\"Container_title__1Evj_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__1eVhf\",\"listWrap\":\"Filter_listWrap__3sFOq\",\"listItem\":\"Filter_listItem__3daw1\",\"name\":\"Filter_name__3YUoL\",\"number\":\"Filter_number__3-3z1\",\"btn\":\"Filter_btn__1U4AH\"};","import React, { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FORM_INITIAL_DATA } from \"../../data/initialData.json\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\n\r\nconst ContactForm = ({ addNewContact, dataUI }) => {\r\n  const [state, setState] = useState({ ...FORM_INITIAL_DATA });\r\n  const { name, number } = state;\r\n\r\n  const nameId = nanoid();\r\n  const numberId = nanoid();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const resetStateData = () => {\r\n    setState({ ...FORM_INITIAL_DATA });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const wasAddedNewContact = addNewContact(name, number);\r\n\r\n    if (!wasAddedNewContact) return;\r\n\r\n    resetStateData();\r\n  };\r\n\r\n  const { inputName, inputTel, submitBtn } = dataUI;\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n      <label htmlFor={nameId}>{inputName}</label>\r\n      <input\r\n        className={input}\r\n        id={nameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={name}\r\n      />\r\n      <label htmlFor={numberId}>{inputTel}</label>\r\n      <input\r\n        className={input}\r\n        id={numberId}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={number}\r\n      />\r\n      <button className={btn} type=\"submit\">\r\n        {submitBtn}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string,\r\n    inputTel: PropTypes.string,\r\n    submitBtn: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { wrap } from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ handleChange, filter, inputSearch }) => {\r\n  const findContactId = nanoid();\r\n  return (\r\n    <div className={wrap}>\r\n      <label htmlFor={findContactId}>{inputSearch}</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  inputSearch: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({ contactsDataToRender, deleteContact, dataUI }) => {\r\n  const { deleteBtn, noDataToRender } = dataUI;\r\n  const { title, contacts } = contactsDataToRender;\r\n\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(item.name)}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string.isRequired,\r\n    noDataToRender: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import { storageKey } from \"../data/initialData.json\";\r\n\r\nconst getDataFromStorage = () => {\r\n  let dataFromStorage = localStorage.getItem(storageKey);\r\n  dataFromStorage = JSON.parse(dataFromStorage);\r\n  if (!dataFromStorage || dataFromStorage.length === 0) {\r\n    return;\r\n  }\r\n  return dataFromStorage;\r\n};\r\n\r\nexport default getDataFromStorage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport { APP_INITIAL_DATA, storageKey } from \"../data/initialData.json\";\r\nimport dataUI from \"../data/dataUI.json\";\r\nimport getDataFromStorage from \"../service/storageService\";\r\n\r\nconst {\r\n  alertMsg,\r\n  allContacts,\r\n  search,\r\n  titleMain,\r\n  titleSecondary,\r\n  inputName,\r\n  inputTel,\r\n  submitBtn,\r\n  deleteBtn,\r\n  inputSearch,\r\n  noDataToRender,\r\n} = dataUI;\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState({ ...APP_INITIAL_DATA });\r\n  const { contacts, filter } = state;\r\n\r\n  useEffect(() => {\r\n    const dataFromStorage = getDataFromStorage();\r\n    if (!dataFromStorage) return;\r\n    setState((prev) => ({ ...prev, contacts: [...dataFromStorage] }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const dataToStorage = JSON.stringify(contacts);\r\n    localStorage.setItem(storageKey, dataToStorage);\r\n  }, [contacts]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const checkIsDoublingContacts = (newName) => {\r\n    const isAlreadyInContacts = contacts.find(\r\n      ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n    );\r\n    if (isAlreadyInContacts) {\r\n      alert(`${newName} ${alertMsg}`);\r\n      return isAlreadyInContacts;\r\n    }\r\n    return isAlreadyInContacts;\r\n  };\r\n\r\n  const addNewContact = (name, number) => {\r\n    const isAlreadyInContacts = checkIsDoublingContacts(name);\r\n\r\n    if (isAlreadyInContacts) {\r\n      return;\r\n    }\r\n\r\n    setState((prev) => ({\r\n      ...prev,\r\n      contacts: [\r\n        ...prev.contacts,\r\n        {\r\n          name,\r\n          id: nanoid(),\r\n          number,\r\n        },\r\n      ],\r\n    }));\r\n\r\n    return !isAlreadyInContacts;\r\n  };\r\n\r\n  const deleteContact = (contactToDelete) => {\r\n    const filteredContacts = contacts.filter(\r\n      ({ name }) => name !== contactToDelete\r\n    );\r\n    setState((prev) => ({ ...prev, contacts: [...filteredContacts] }));\r\n  };\r\n\r\n  const contactsToRender = ({ contacts, filter }) => {\r\n    if (!filter) {\r\n      return { contacts, title: `${allContacts}` };\r\n    }\r\n\r\n    const filteredContacts = contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n\r\n    return { contacts: filteredContacts, title: `${search}` };\r\n  };\r\n\r\n  const { container, title } = styles;\r\n  const contactsDataToRender = contactsToRender(state);\r\n\r\n  return (\r\n    <div className={container}>\r\n      <h2 className={title}>{titleMain}</h2>\r\n\r\n      <ContactForm\r\n        dataUI={{ inputName, inputTel, submitBtn }}\r\n        addNewContact={addNewContact}\r\n      />\r\n\r\n      <h2 className={title}>{titleSecondary}</h2>\r\n\r\n      <Filter\r\n        inputSearch={inputSearch}\r\n        filter={filter}\r\n        handleChange={handleChange}\r\n      />\r\n\r\n      <ContactsList\r\n        contactsDataToRender={contactsDataToRender}\r\n        deleteContact={deleteContact}\r\n        dataUI={{ deleteBtn, noDataToRender }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}