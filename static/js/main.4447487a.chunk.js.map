{"version":3,"sources":["components/contactsList/ContactsList.module.css","components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","components/App.js","index.js"],"names":["module","exports","INITIAL_DATA","name","number","ContactForm","state","nameId","nanoid","numberId","handleChange","e","target","value","setState","resetStateData","handleSubmit","preventDefault","props","addNewContact","this","dataUI","inputName","inputTel","submitBtn","className","form","onSubmit","htmlFor","input","id","type","pattern","title","required","autoComplete","onChange","btn","Component","Filter","filter","inputSearch","findContactId","styles","wrap","listWrap","listItem","ContactsList","contactsDataToRender","contacts","deleteContact","deleteBtn","noDataToRender","length","map","item","onClick","alertMsg","allContacts","search","titleMain","titleSecondary","App","stateInitialData","checkForDoublingContacts","newName","isAlreadyInContacts","find","toLowerCase","alert","prev","contactToDelete","filteredContacts","contactsToRender","includes","dataFromStorage","localStorage","getItem","storageKey","parsedData","JSON","parse","prevState","prevContacts","currentContacts","dataToStorage","stringify","setItem","container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4447487a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__2CJH8\",\"listItem\":\"ContactsList_listItem__1MD_k\",\"btn\":\"ContactsList_btn__3p_my\",\"name\":\"ContactsList_name__1KJf-\",\"number\":\"ContactsList_number__1hRxz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3gAn0\",\"btn\":\"ContactForm_btn__pGwMA\",\"input\":\"ContactForm_input__3N3wQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2hGjQ\",\"title\":\"Container_title__1Evj_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__1eVhf\",\"listWrap\":\"Filter_listWrap__3sFOq\",\"listItem\":\"Filter_listItem__3daw1\",\"name\":\"Filter_name__3YUoL\",\"number\":\"Filter_number__3-3z1\",\"btn\":\"Filter_btn__1U4AH\"};","import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\n\r\nconst INITIAL_DATA = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = { ...INITIAL_DATA };\r\n\r\n  nameId = nanoid();\r\n  numberId = nanoid();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  resetStateData = () => {\r\n    this.setState({ ...INITIAL_DATA });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const wasAddedNewContact = this.props.addNewContact(name, number);\r\n\r\n    if (wasAddedNewContact) {\r\n      this.resetStateData();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const { inputName, inputTel, submitBtn } = this.props.dataUI;\r\n    return (\r\n      <form className={form} onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameId}>{inputName}</label>\r\n        <input\r\n          className={input}\r\n          id={this.nameId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={name}\r\n        />\r\n        <label htmlFor={this.numberId}>{inputTel}</label>\r\n        <input\r\n          className={input}\r\n          id={this.numberId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={number}\r\n        />\r\n        <button className={btn} type=\"submit\">\r\n          {submitBtn}\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string,\r\n    inputTel: PropTypes.string,\r\n    submitBtn: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ handleChange, filter, inputSearch }) => {\r\n  const findContactId = nanoid();\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <label htmlFor={findContactId}>{inputSearch}</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func,\r\n  filter: PropTypes.string,\r\n  inputSearch: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({\r\n  contactsDataToRender: { title, contacts },\r\n  deleteContact,\r\n  dataUI: { deleteBtn, noDataToRender },\r\n}) => {\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(item.name)}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ),\r\n  }),\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string,\r\n    noDataToRender: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactsList;\r\n","import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport { stateInitialData, storageKey } from \"../data/initialData.json\";\r\nimport dataUI from \"../data/dataUI.json\";\r\n\r\nconst {\r\n  alertMsg,\r\n  allContacts,\r\n  search,\r\n  titleMain,\r\n  titleSecondary,\r\n  inputName,\r\n  inputTel,\r\n  submitBtn,\r\n  deleteBtn,\r\n  inputSearch,\r\n  noDataToRender,\r\n} = dataUI;\r\n\r\nclass App extends Component {\r\n  state = { ...stateInitialData };\r\n\r\n  componentDidMount() {\r\n    const dataFromStorage = localStorage.getItem(storageKey);\r\n    if (!dataFromStorage) {\r\n      return;\r\n    }\r\n    const parsedData = JSON.parse(dataFromStorage);\r\n    this.setState({ contacts: [...parsedData] });\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    const prevContacts = prevState.contacts;\r\n    const currentContacts = this.state.contacts;\r\n    const wasChanges = prevContacts !== currentContacts;\r\n    if (wasChanges) {\r\n      const dataToStorage = JSON.stringify(currentContacts);\r\n      localStorage.setItem(storageKey, dataToStorage);\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  checkForDoublingContacts = (newName) => {\r\n    const isAlreadyInContacts = this.state.contacts.find(\r\n      (item) => item.name.toLowerCase() === newName.toLowerCase()\r\n    );\r\n\r\n    if (isAlreadyInContacts) {\r\n      alert(`${newName} ${alertMsg}`);\r\n      return;\r\n    }\r\n\r\n    return !isAlreadyInContacts;\r\n  };\r\n\r\n  addNewContact = (name, number) => {\r\n    const canAddContact = this.checkForDoublingContacts(name);\r\n\r\n    if (!canAddContact) {\r\n      return;\r\n    }\r\n\r\n    this.setState((prev) => ({\r\n      contacts: [\r\n        ...prev.contacts,\r\n        {\r\n          name,\r\n          id: nanoid(),\r\n          number,\r\n        },\r\n      ],\r\n    }));\r\n\r\n    return true;\r\n  };\r\n\r\n  deleteContact = (contactToDelete) => {\r\n    const filteredContacts = this.state.contacts.filter(\r\n      ({ name }) => name !== contactToDelete\r\n    );\r\n    this.setState({ contacts: [...filteredContacts] });\r\n  };\r\n\r\n  contactsToRender = ({ contacts, filter }) => {\r\n    if (!filter) return { contacts, title: `${allContacts}` };\r\n\r\n    const filteredContacts = contacts.filter((item) =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n\r\n    return { contacts: filteredContacts, title: `${search}` };\r\n  };\r\n\r\n  render() {\r\n    const { container, title } = styles;\r\n\r\n    return (\r\n      <div className={container}>\r\n        <h2 className={title}>{titleMain}</h2>\r\n\r\n        <ContactForm\r\n          dataUI={{ inputName, inputTel, submitBtn }}\r\n          addNewContact={this.addNewContact}\r\n        />\r\n\r\n        <h2 className={title}>{titleSecondary}</h2>\r\n\r\n        <Filter\r\n          inputSearch={inputSearch}\r\n          filter={this.state.filter}\r\n          handleChange={this.handleChange}\r\n        />\r\n\r\n        <ContactsList\r\n          contactsDataToRender={this.contactsToRender(this.state)}\r\n          deleteContact={this.deleteContact}\r\n          dataUI={{ deleteBtn, noDataToRender }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}